# This workflow will install dependencies, run tests, build the project,
# and then publish a package to the npm registry when a new release is created on GitHub.

name: Node.js Package Publish

on:
  release:
    types: [created]

jobs:
  publish-to-npm:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository's code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js. This action also handles caching and creates the .npmrc file for authentication.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org/"
          cache: "npm" # Add caching for faster installs

      # Step 3: Install dependencies using a clean install
      # 'npm ci' is recommended for CI environments as it uses the package-lock.json for a reproducible build.
      - name: Install dependencies
        run: npm ci

      # Step 4: Run the test suite as a quality gate
      # The workflow will fail here if tests do not pass, preventing a broken package from being published.
      - name: Run tests
        run: npm test

      # Step 5: Run the build script
      # This compiles the TypeScript code from 'src/' into JavaScript in the 'dist/' folder.
      - name: Build project
        run: npm run build

      # Step 6: Update package.json version from the release tag
      # This command extracts the tag name from the GitHub release (e.g., "v1.0.1"),
      # removes the "v" prefix, and updates the version in package.json.
      - name: Update package version
        run: npm version ${{ github.ref_name }} --no-git-tag-version --no-commit-hooks --allow-same-version

      # Step 7: Publish the package to npm
      # 'npm publish' will read your package.json, include the files specified in the "files" array (i.e., the 'dist' folder), and publish it.
      - name: Publish to npm
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
